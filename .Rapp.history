phi <- 0.09  # probability of false positive#
Q <- matrix(rbinom(n*J,1,phi),n,J)  # false positive indicator variables#
Y.tilde <- Y+Q  # add false positives to data set#
Y.tilde[Y.tilde==2] <- 1
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model#
#
# Examine output#
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,10000,adapt=TRUE)  # fit
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out3$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
apply(out3$beta,2,quantile,c(0.025,0.975))
apply(out1$beta,2,quantile,c(0.025,0.975))
source("fp/occ.fp.marginal.lik.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,10000,adapt=TRUE)
apply(out2$beta,2,quantile,c(0.025,0.975))
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
out1 <- occ.mcmc(Y,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
(p^Y*(1-p)^(1-Y))^z
(1-phi)*(p^Y*(1-p)^(1-Y))^z
(p^Y*(1-p)^(1-Y))^z*Y0^(1-z)
(p^Y*(1-p)^(1-Y))^z
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
Q
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model
binom(y,1,p)
dbinom(y,1,p)
dbinom(y,1,p)^(1-Q)
z
(dbinom(y,1,p)^(1-Q))^z
Y
(dbinom(y,1,p)^(1-Q))
z
(dbinom(y,1,p)^(1-Q))
(dbinom(y,1,p)^(1-Q))^z
z
(dbinom(y,1,p)^(1-Q))
z
(dbinom(Y,1,p)^(1-Q))^z
log((dbinom(Y,1,p)^(1-Q))^z)
mh.star <- sum(log((dbinom(Y,1,p)^(1-Q))^z))#
	 		+sum(dnorm(alpha.star,mu.alpha,sigma.alpha,log=TRUE))
z1 <- z==1	#
	  	alpha.star <- rnorm(qW,alpha,tune$alpha)#
	  	p.star <- apply(W,3,function(x) expit(x%*%alpha.star))
mh.star <- sum(log((dbinom(Y,1,p.star)^(1-Q))^z))#
	 		+sum(dnorm(alpha.star,mu.alpha,sigma.alpha,log=TRUE))
mh.star <- sum(log((dbinom(Y,1,p.star)^(1-Q))^z))#
	 		+sum(dnorm(alpha.star,mu.alpha,sigma.alpha,log=TRUE))
sum(dnorm(alpha.star,mu.alpha,sigma.alpha,log=TRUE))
mh.star <- sum(log((dbinom(Y,1,p.star)^(1-Q))^z))+#
	 		sum(dnorm(alpha.star,mu.alpha,sigma.alpha,log=TRUE))
mh.star
setwd("~/Documents/git/Occupancy/")#
rm(list=ls())#
#
library(lattice)#
#
expit <- function(y){#
	exp(y)/(1+exp(y)) #
}
n <- 100  # number of individuals#
J <- 20  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
	# W[,3,i] <- sample(c(0,1),n,prob=c(0.7,0.3),replace=TRUE)#
}
alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability
summary(p)
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
	# W[,3,i] <- sample(c(0,1),n,prob=c(0.7,0.3),replace=TRUE)#
}#
alpha <- matrix(c(1,1),2,1)  # coefficients for detection; unbiased beta p
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability
summary(p)
alpha
W
n <- 100  # number of individuals#
J <- 20  # number of samples per individual
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability
Q
setwd("~/Documents/git/Occupancy/")#
rm(list=ls())#
#
library(lattice)#
#
expit <- function(y){#
	exp(y)/(1+exp(y)) #
}
n <- 100  # number of individuals#
J <- 20  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
	# W[,3,i] <- sample(c(0,1),n,prob=c(0.7,0.3),replace=TRUE)#
}#
alpha <- matrix(c(1,1),2,1)  # coefficients for detection; unbiased beta p\in{0.02,0.9}#
# alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection#
# alpha <- matrix(c(-1,1),2,1)  # coefficients for detection#
# alpha <- matrix(c(0,0.5,5),3,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)
z <- rbinom(n,1,psi)  # simulated occupancy state
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
Y
phi <- 0.09  # probability of false positive#
Q <- matrix(rbinom(n*J,1,phi),n,J)  # false positive indicator variables#
Y.tilde <- Y+Q  # add false positives to data set#
Y.tilde[Y.tilde==2] <- 1
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
source("fp/occ.fp.marginal.lik.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
matplot(out2$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
source("fp/occ.fp.marginal.lik.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,10000,adapt=TRUE)
matplot(out2$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out2$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
apply(out2$beta,2,mean)  # posterior means for beta
barplot(table(out2$N));sum(z)  # posterior of number in 'occupied' state
boxplot(out2$z.mean~z)  # true occupancy versus estimated occupancy
source("fp/occ.fp.latent.var.mcmc.R")
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out3$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
apply(out1$alpha,2,quantile,c(0.025,0.975))
apply(out2$alpha,2,quantile,c(0.025,0.975))
apply(out3$alpha,2,quantile,c(0.025,0.975))
source("fp/occ.fp.latent.var.mcmc.R")
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,10000,adapt=TRUE)  # fit
boxplot(out3$Q.mean~Q)  $ true false positives versus estimated false positives
boxplot(out3$Q.mean~Q)  # true false positives versus estimated false positives
out3
out3$Q.mean
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out3$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out3$Q.mean~Q)  # true false positives versus estimated false positives
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
out1 <- occ.mcmc(Y,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
apply(out1$alpha,2,quantile,c(0.025,0.975))
apply(out2$alpha,2,quantile,c(0.025,0.975))
apply(out3$alpha,2,quantile,c(0.025,0.975))
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out2$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
n <- 100  # number of individuals#
J <- 5  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
	# W[,3,i] <- sample(c(0,1),n,prob=c(0.7,0.3),replace=TRUE)#
}#
alpha <- matrix(c(1,1),2,1)  # coefficients for detection; unbiased beta p\in{0.02,0.9}#
# alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection#
# alpha <- matrix(c(-1,1),2,1)  # coefficients for detection#
# alpha <- matrix(c(0,0.5,5),3,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
# summary(p[W[,3,1]==1,1])#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
phi <- 0.09  # probability of false positive#
Q <- matrix(rbinom(n*J,1,phi),n,J)  # false positive indicator variables#
Y.tilde <- Y+Q  # add false positives to data set#
Y.tilde[Y.tilde==2] <- 1
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model
source("fp/occ.fp.marginal.lik.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,10000,adapt=TRUE)  # fit
matplot(out2$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out2$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out3$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out3$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out3$N));sum(z)  # posterior of number in 'occupied' state
hist(out3$phi,breaks=100);abline(v=pi,lty=2,col=2)  # posterior for pi
boxplot(out3$Q.mean~Q)  # true false positives versus estimated false positives
out3$Q.mean
tail(out3$Q.mean,10)
tail(out3$z,10)
tail(out3$Q.mean,10)
tail(z,10)
tail(p,10)
tail(Y)
tail(Y,10)
tail(Y.tilde,10)
tail(out3$Q.mean,10)
tail(p,10)
tail(z,10)
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out3$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
barplot(table(out3$N));sum(z)  # posterior of number in 'occupied' state
hist(out3$phi,breaks=100);abline(v=pi,lty=2,col=2)  # posterior for pi
boxplot(out3$Q.mean~Q)  # true false positives versus estimated false positives
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
apply(out1$alpha,2,quantile,c(0.025,0.975))
apply(out2$alpha,2,quantile,c(0.025,0.975))
apply(out3$alpha,2,quantile,c(0.025,0.975))
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out1$alpha,2,quantile,c(0.025,0.975))
apply(out2$alpha,2,quantile,c(0.025,0.975))
apply(out3$alpha,2,quantile,c(0.025,0.975))
n <- 100  # number of individuals#
J <- 3  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
	# W[,3,i] <- sample(c(0,1),n,prob=c(0.7,0.3),replace=TRUE)#
}#
alpha <- matrix(c(1,1),2,1)  # coefficients for detection; unbiased beta p\in{0.02,0.9}#
# alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection#
# alpha <- matrix(c(-1,1),2,1)  # coefficients for detection#
# alpha <- matrix(c(0,0.5,5),3,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
# summary(p[W[,3,1]==1,1])#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
phi <- 0.09  # probability of false positive#
Q <- matrix(rbinom(n*J,1,phi),n,J)  # false positive indicator variables#
Y.tilde <- Y+Q  # add false positives to data set#
Y.tilde[Y.tilde==2] <- 1
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.marginal.lik.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out2$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out2$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
matplot(out2$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
matplot(out3$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
apply(out3$beta,2,mean)  # posterior means for beta
boxplot(out3$z.mean~z)  # true occupancy versus estimated occupancy
boxplot(out3$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out3$N));sum(z)  # posterior of number in 'occupied' state
boxplot(out3$Q.mean~Q)  # true false positives versus estimated false positives
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
apply(out1$alpha,2,quantile,c(0.025,0.975))
apply(out2$alpha,2,quantile,c(0.025,0.975))
apply(out3$alpha,2,quantile,c(0.025,0.975))
n <- 30  # number of individuals#
J <- 3  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
	# W[,3,i] <- sample(c(0,1),n,prob=c(0.7,0.3),replace=TRUE)#
}#
alpha <- matrix(c(1,1),2,1)  # coefficients for detection; unbiased beta p\in{0.02,0.9}#
# alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection#
# alpha <- matrix(c(-1,1),2,1)  # coefficients for detection#
# alpha <- matrix(c(0,0.5,5),3,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
# summary(p[W[,3,1]==1,1])
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
phi <- 0.09  # probability of false positive#
Q <- matrix(rbinom(n*J,1,phi),n,J)  # false positive indicator variables#
Y.tilde <- Y+Q  # add false positives to data set#
Y.tilde[Y.tilde==2] <- 1
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.marginal.lik.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
matplot(out2$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out3$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
apply(out3$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out1$beta,2,quantile,c(0.025,0.975))
z
n <- 50  # number of individuals#
J <- 3  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
	# W[,3,i] <- sample(c(0,1),n,prob=c(0.7,0.3),replace=TRUE)#
}#
alpha <- matrix(c(1,1),2,1)  # coefficients for detection; unbiased beta p\in{0.02,0.9}#
# alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection#
# alpha <- matrix(c(-1,1),2,1)  # coefficients for detection#
# alpha <- matrix(c(0,0.5,5),3,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
# summary(p[W[,3,1]==1,1])#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations#
#
# Add false positives to dataset#
phi <- 0.09  # probability of false positive#
Q <- matrix(rbinom(n*J,1,phi),n,J)  # false positive indicator variables#
Y.tilde <- Y+Q  # add false positives to data set#
Y.tilde[Y.tilde==2] <- 1
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.marginal.lik.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out2$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
apply(out1$alpha,2,quantile,c(0.025,0.975))
apply(out2$alpha,2,quantile,c(0.025,0.975))
apply(out3$alpha,2,quantile,c(0.025,0.975))
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out2$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
n <- 100  # number of individuals#
J <- 20  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
	# W[,3,i] <- sample(c(0,1),n,prob=c(0.7,0.3),replace=TRUE)#
}#
alpha <- matrix(c(1,1),2,1)  # coefficients for detection; unbiased beta p\in{0.02,0.9}#
# alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection#
# alpha <- matrix(c(-1,1),2,1)  # coefficients for detection#
# alpha <- matrix(c(0,0.5,5),3,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations#
#
# Add false positives to dataset#
phi <- 0.09  # probability of false positive#
Q <- matrix(rbinom(n*J,1,phi),n,J)  # false positive indicator variables#
Y.tilde <- Y+Q  # add false positives to data set#
Y.tilde[Y.tilde==2] <- 1
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.marginal.lik.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out2$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
n <- 100  # number of individuals#
J <- 30  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
	# W[,3,i] <- sample(c(0,1),n,prob=c(0.7,0.3),replace=TRUE)#
}#
alpha <- matrix(c(1,1),2,1)  # coefficients for detection; unbiased beta p\in{0.02,0.9}#
# alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection#
# alpha <- matrix(c(-1,1),2,1)  # coefficients for detection#
# alpha <- matrix(c(0,0.5,5),3,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
# summary(p[W[,3,1]==1,1])#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations#
#
# Add false positives to dataset#
phi <- 0.09  # probability of false positive#
Q <- matrix(rbinom(n*J,1,phi),n,J)  # false positive indicator variables#
Y.tilde <- Y+Q  # add false positives to data set#
Y.tilde[Y.tilde==2] <- 1
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.marginal.lik.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
apply(out1$alpha,2,quantile,c(0.025,0.975))
apply(out2$alpha,2,quantile,c(0.025,0.975))
apply(out3$alpha,2,quantile,c(0.025,0.975))
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
	# W[,3,i] <- sample(c(0,1),n,prob=c(0.7,0.3),replace=TRUE)#
}#
alpha <- matrix(c(1,1),2,1)  # coefficients for detection; unbiased beta p\in{0.02,0.9}#
# alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection#
# alpha <- matrix(c(-1,1),2,1)  # coefficients for detection#
# alpha <- matrix(c(0,0.5,5),3,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
# summary(p[W[,3,1]==1,1])#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
phi <- 0.09  # probability of false positive#
Q <- matrix(rbinom(n*J,1,phi),n,J)  # false positive indicator variables#
Y.tilde <- Y+Q  # add false positives to data set#
Y.tilde[Y.tilde==2] <- 1
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
source("fp/occ.fp.marginal.lik.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out2 <- occ.fp.marginal.lik.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)
source("fp/occ.fp.latent.var.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,phi=phi,Q=Q)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.35,alpha=0.1)#
out3 <- occ.fp.latent.var.mcmc(Y.tilde,W,X,priors,start,tune,100000,adapt=TRUE)  # fit model
matplot(out3$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out3$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
apply(out1$beta,2,quantile,c(0.025,0.975))
apply(out2$beta,2,quantile,c(0.025,0.975))
apply(out3$beta,2,quantile,c(0.025,0.975))
