matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,10000,alpha.tune=0.1,beta.tune=0.1)  # fit model
z
Q
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,10000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
sum(z)
z
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,1000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,1000,alpha.tune=0.1,beta.tune=0.1)  # fit model
z
z1 <- z==1
alpha.star <- rnorm(qW,alpha,alpha.tune)
alpha.star
p.star <- apply(W,3,function(x) expit(x%*%alpha.star))
p
p.star
Y[z1,]
sum(dbinom(Y[z1,],1,p.star[z1,],log=TRUE))
sum(dbinom(c(Y[z1,]),1,c(p.star[z1,]),log=TRUE))
sapply(z1,function(x) sum(dbinom(Y[x,],1,p.star[x,],log=TRUE)))
sum(sapply(z1,function(x) sum(dbinom(Y[x,],1,p.star[x,],log=TRUE))))
sum(dbinom(Y[z1,],1,p.star[z1,],log=TRUE))
sapply(z1,function(x) sum(dbinom(Y[x,],1,p.star[x,],log=TRUE)))
z1
Y[4,]
dbinom(Y[4,],1,p.star[4,])
dbinom(Y[4,1],1,p.star[4,1])
dbinom(Y[4,2],1,p.star[4,2])
dbinom(Y[4,],1,p.star[4,])
Q
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,1000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
setwd("~/Documents/git/Occupancy/")#
rm(list=ls())#
#
expit <- function(y){#
	exp(y)/(1+exp(y)) #
}#
####
### Simulate 'single-season' occupancy data#
####
#
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
}#
alpha <- matrix(c(0.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,1000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
}#
alpha <- matrix(c(0.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations#
####
### Fit standard occupancy model#
####
#
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,1000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
}#
alpha <- matrix(c(0.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations#
####
### Fit standard occupancy model#
####
#
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,1000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
}#
alpha <- matrix(c(0.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,1000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
}#
alpha <- matrix(c(0.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,1000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,1000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
}#
alpha <- matrix(c(0.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,1000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
p0.tmp <- psi*apply(p^Y*(1-p)^(1-Y),1,prod)
y0
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
}#
alpha <- matrix(c(0.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,10000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.0),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
}#
alpha <- matrix(c(0.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations#
####
### Fit standard occupancy model#
####
#
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,10000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
}#
alpha <- matrix(c(0.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations#
####
### Fit standard occupancy model#
####
#
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,10000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
source("static/occ.probit.1mcmc.R")
source("static/occ.probit.1.mcmc.R")
out1 <- occ.probit.1.mcmc(Y,W,X,priors,start,10000)  # fit model
source("static/occ.probit.1.mcmc.R")#
start <- list(beta=beta,alpha=alpha)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	Sigma.beta=diag(qX)*10,Sigma.alpha=diag(qW)*10)#
out1 <- occ.probit.1.mcmc(Y,W,X,priors,start,10000)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,10000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
alpha <- matrix(c(-0.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)
alpha <- matrix(c(-1,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)
alpha <- matrix(c(-1.5,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
out1 <- occ.mcmc(Y,W,X,priors,start,10000,alpha.tune=0.1,beta.tune=0.1)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
apply(out1$beta,2,mean)  # posterior means for beta
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.1,alpha=0.1)
out1 <- occ.mcmc(Y,W,X,priors,start,tune,1000,adapt=TRUE)  # fit model
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.1,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,1000,adapt=TRUE)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
out1$tune
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.1,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,1000,adapt=TRUE)  # fit model
out1$tune
out1$keep
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.1,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,1000,adapt=TRUE)  # fit model
out1$tune
out1$keep
out1 <- occ.mcmc(Y<W,X,priors,out1$end,out1$tune,adapt=TRUE)
out1 <- occ.mcmc(Y,W,X,priors,out1$end,out1$tune,adapt=TRUE)
out1 <- occ.mcmc(Y,W,X,priors,out1$end,out1$tune,n.mcmc=1000,adapt=TRUE)
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
out1$tune
out1$keep
source("static/occ.mcmc.R")
out1 <- occ.mcmc(Y,W,X,priors,out1$end,out1$tune,n.mcmc=1000,adapt=TRUE)
out1$tune
out1$keep
start <- list(beta=rep(0,qX),alpha=rep(0,qW),z=z)  # starting values
out1 <- occ.mcmc(Y,W,X,priors,start,tune,1000,adapt=TRUE)  # fit model
out1 <- occ.mcmc(Y,W,X,priors,out1$end,out1$tune,n.mcmc=1000,adapt=TRUE)
out1 <- occ.mcmc(Y,W,X,priors,start,tune,1000,adapt=TRUE)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
out1 <- occ.mcmc(Y,W,X,priors,out1$end,out1$tune,n.mcmc=1000,adapt=TRUE)
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
pi <- 0.09  # probability of false positive
controls <- rbinom(50,1,pi)  # negative control data set
controls <- list(positive=sum(controls),N=length(controls))  # summarize negative controls
Y.tilde <- Y
which(z==0)
Y.tilde <- Y#
z0 <- which(z==0)
Y.tilde[z0,] <- rbinom(J*length(z0),1,pi)
Y.tilde[z0,]
z1 <- which(z==1)
Y.tilde[z1,]
rowSums(Y.tilde[z0,])
rowSums(Y.tilde[z1,])
alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.1,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,1000,adapt=TRUE)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
out1 <- occ.mcmc(Y,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
apply(out1$beta,2,mean)  # posterior means for beta
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
pi <- 0.09  # probability of false positive#
controls <- rbinom(50,1,pi)  # negative control data set#
controls <- list(positive=sum(controls),N=length(controls))  # summarize negative controls
Y.tilde <- Y#
z0 <- which(z==0)#
Y.tilde[z0,] <- rbinom(J*length(z0),1,pi)
z1 <- which(z==1)#
for(i in z1){#
	idx0 <- which(Y.tilde[i,]==0)#
	Y.tilde[i,idx0] <- rbinom(length(idx0),1,pi)#
}
rowSums(Y.tilde[z0,])
rowSums(Y.tilde[z1,])
length(Y.tilde)
Y.tilde
idx <- which(Y.tilde==0)
idx
Y.tilde[idx0]
idx0
idx0 <- which(Y.tilde==0)
Y.tilde[idx0]
Y.tilde[idx0] <- rbinom(lenght(idx0),1,pi)
Y.tilde[idx0] <- rbinom(length(idx0),1,pi)
Y.tilde[idx0]
Y.tilde
rowSums(Y.tilde[z0,])
rowSums(Y.tilde[z1,])
n*J
Q <- rbinom(n*J,1,pi)
Q
Q <- matrix(rbinom(n*J,1,pi),n,J)
Q
Q <- matrix(0,n,J)
idx0 <- which(Y.tilde==0)
idx0
Q[idx0] <- rbinom(length(idx0),1,pi)
Q
Y.tilde-Q
apply(Y.tilde-Q,1,function(x) sum(x==(-1)))
apply(Y.tilde-Q,1,function(x) sum(x==(1)))
Y.tilde <- Y+Q
rowSums(Y.tilde[z0,])
rowSums(Y.tilde[z1,])
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.1,alpha=0.1)
tune <- list(beta=0.1,alpha=0.1)
setwd("~/Documents/git/Occupancy/")#
rm(list=ls())#
#
expit <- function(y){#
	exp(y)/(1+exp(y)) #
}#
####
### Simulate 'single-season' occupancy data#
####
#
n <- 100  # number of individuals#
J <- 8  # number of samples per individual#
#
# Heterogeneity in occupancy#
X <- matrix(cbind(1,rnorm(n)),n,2)  # design matrix for occupancy#
qX <- ncol(X)#
beta <- matrix(c(0,1.5),2,1)  # coefficients for occupancy#
psi <- expit(X%*%beta)  # occupancy probability#
hist(psi)#
#
# Heterogeneity in detection#
W <- array(1,dim=c(n,2,J))  # design matrix for detection#
qW <- dim(W)[2]#
for(i in 1:J){#
	W[,2,i] <- rnorm(n)#
}#
alpha <- matrix(c(0,0.5),2,1)  # coefficients for detection#
p <- apply(W,3,function(x) expit(x%*%alpha))  # detection probability#
summary(p)#
#
# State process and observations#
z <- rbinom(n,1,psi)  # simulated occupancy state#
Y <- sapply(1:J,function(x) rbinom(n,1,z*p[,x]))  # simulated observations
source("static/occ.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.1,alpha=0.1)#
out1 <- occ.mcmc(Y,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model
matplot(out1$beta,type="l");abline(h=beta,col=1:2,lty=2)  # posterior for beta
matplot(out1$alpha,type="l");abline(h=alpha,col=1:2,lty=2)  # posterior for alpha
apply(out1$beta,2,mean)  # posterior means for beta
boxplot(out1$z.mean~z)  # true occupancy versus estimated occupancy
barplot(table(out1$N));sum(z)  # posterior of number in 'occupied' state
pi <- 0.09  # probability of false positive#
controls <- rbinom(50,1,pi)  # negative control data set#
controls <- list(positive=sum(controls),N=length(controls))  # summarize negative controls
Q <- matrix(0,n,J)  # false positive indicator variables
idx0 <- which(Y==0)
Q[idx0] <- rbinom(length(idx0),1,pi)
Y.tilde <- Y+Q  # add false positives to data set
rowSums(Y.tilde[z0,])
rowSums(Y.tilde[z==0,])#
rowSums(Y.tilde[z==1,])
source("fp/occ.fp.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,Q=Q,pi=pi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.1,alpha=0.1)#
out2 <- occ.fp.mcmc(Y,W,X,priors,start,tune,10000,adapt=TRUE)  # fit model
source("fp/occ.fp.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,Q=Q,pi=pi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.1,alpha=0.1)#
out2 <- occ.fp.mcmc(Y,W,X,priors,start,tune,100,adapt=TRUE)  # fit model
exp(mh.star-mh.0)
p
Y.tmp
p.tmp <- p[z1,]#
		Y.tmp <- Y[z1,]#
		Q.tmp <- Q[z1,]
z1 <- which(z==1)#
		z0 <- which(z==0)#
		p.tmp <- p[z1,]#
		Y.tmp <- Y[z1,]#
		Q.tmp <- Q[z1,]
psi.tmp <- psi[z1,]
z1 <- which(z==1)#
		z0 <- which(z==0)#
		p.tmp <- p[z1,]#
		Y.tmp <- Y[z1,]#
		Q.tmp <- Q[z1,]#
		psi.tmp <- psi[z1,]#
	 	p0.tmp <- (psi.tmp*p.tmp^Y.tmp*(1-p.tmp)^(1-Y.tmp))^(1-Q.tmp)*#
	 		(pi^Y.tmp*(1-pi)^(1-Y.tmp))^(Q.tmp)#
		p1.tmp <- ((1-psi.tmp)*pi^Y.tmp*(1-pi)^(1-Y.tmp))
psi.tmp <- p0.tmp/(p0.tmp+p1.tmp)
psi.tmp
z[z1] <- rbinom(length(z1),1,psi.tmp)
psi.tmp <- psi.tmp/(psi.tmp+(1-psi.tmp)*p.tmp^Y.tmp*(1-p.tmp)^(1-Y.tmp))
psi.tmp
z1 <- which(z==1)#
		z0 <- which(z==0)#
		p.tmp <- p[z1,]#
		Y.tmp <- Y[z1,]#
		Q.tmp <- Q[z1,]#
		psi.tmp <- psi[z1,]#
	 	p0.tmp <- (psi.tmp*p.tmp^Y.tmp*(1-p.tmp)^(1-Y.tmp))^(1-Q.tmp)*#
	 		(pi^Y.tmp*(1-pi)^(1-Y.tmp))^(Q.tmp)#
		p1.tmp <- ((1-psi.tmp)*pi^Y.tmp*(1-pi)^(1-Y.tmp))#
		psi.tmp <- p0.tmp/(p0.tmp+p1.tmp)	#
		psi.tmp <- apply(psi.tmp,1,prod)
psi.tmp
p.tmp <- p[z0,]#
		Y.tmp <- Y[z0,]#
		psi.tmp <- psi[z0,]#
	 	p0.tmp <- (psi.tmp*p.tmp^Y.tmp*(1-p.tmp)^(1-Y.tmp))^(1-Q.tmp)*#
	 		(pi^Y.tmp*(1-pi)^(1-Y.tmp))^(Q.tmp)#
		p1.tmp <- ((1-psi.tmp)*pi^Y.tmp*(1-pi)^(1-Y.tmp))#
		psi.tmp <- psi.tmp/(psi.tmp+(1-psi.tmp)*p.tmp^Y.tmp*(1-p.tmp)^(1-Y.tmp))
p0
p.tmp <- p[z0,]#
		Y.tmp <- Y[z0,]#
		psi.tmp <- psi[z0,]#
		p0 <- (1-psi.tmp)*p.tmp^Y.tmp*(1-p.tmp)^(1-Y.tmp)
psi.tmp <- psi.tmp/(psi.tmp+p0)
psi.tmp <- psi.tmp/(psi.tmp+p0)
p.tmp <- p[z0,]#
		Y.tmp <- Y[z0,]#
		psi.tmp <- psi[z0,]#
		p0 <- (1-psi.tmp)*p.tmp^Y.tmp*(1-p.tmp)^(1-Y.tmp)#
		psi.tmp <- psi.tmp/(psi.tmp+p0)
psi.tmp <- apply(psi.tmp,1,prod)
psi.tmp
Q
source("fp/occ.fp.mcmc.R")#
start <- list(beta=beta,alpha=alpha,z=z,Q=Q,pi=pi)  # starting values#
priors <- list(mu.beta=rep(0,qX),mu.alpha=rep(0,qW),  # prior distribution parameters#
	sigma.beta=10,sigma.alpha=10)#
tune <- list(beta=0.1,alpha=0.1)#
out2 <- occ.fp.mcmc(Y,W,X,priors,start,tune,100,adapt=TRUE)  # fit model
1-NA
Q
